#!/usr/bin/env ruby

if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

ENV["BUNDLE_GEMFILE"] = File.expand_path("../../Gemfile", __FILE__)

require 'rubygems'
require 'bundler/setup'

require 'nomnichi_bot'
require "thor"

Encoding.default_external = "UTF-8"

class NomnichiBotCLI < Thor
  check_unknown_options! :except => :completions
  package_name 'nomrat'

  class_option :debug, :type => :boolean, :desc => "Set debug flag"

  map ["--version", "-v"] => :version

  default_command :help
  map ["--help", "-h"] => :help

  ################################################################
  ## Command: help, version
  ################################################################
  desc "help [COMMAND]", "Describe available commands or one specific command"

  def help(command = nil)
    super(command)
  end

  desc "version", "Show version"

  def version
    puts NomnichiBot::VERSION
  end

  ################################################################
  ## Command: server
  ################################################################
  desc "server", "Invoke web server"

  method_option :port,  :desc => "Set server port",  :type => :numeric, :banner => "NUMBER", :default => 8088

  def server
    config = NomnichiBot::Config.load(:slack)
    @webhook_token = config["webhook_token"]
    @server_port   = options[:port]
    debug = options[:debug]

    crt_file = "~/.config/nomnichi_bot/ssl.crt"
    rsa_file = "~/.config/nomnichi_bot/ssl.key"
    NomnichiBot::Command::Server.new(crt_file, rsa_file, @webhook_token, @server_port, debug)
  end

  ################################################################
  ## patch to insert  setup_global_options
  ################################################################
  no_commands do
    def invoke_command(command, *args)
      setup_global_options
      super
    end
  end

  ################################################################
  ## private
  ################################################################
  private

  def exit_on_error(&block)
    begin
      yield if block_given?
    rescue NomnichiBot::ConfigurationError => e
      STDERR.print "ERROR: #{e.message}.\n"
      exit 1
    end
  end

  def setup_global_options
    exit_on_error do
      $NOMNICHI_BOT_DEBUG = true if options[:debug]
    end
  end

  def symbolize_keys(hash)
    Hash[hash.map {|k,v| [k.to_s.gsub('-', '_').to_sym, v]}]
  end

end # class NomnichiBotCLI

NomnichiBotCLI.start(ARGV)
